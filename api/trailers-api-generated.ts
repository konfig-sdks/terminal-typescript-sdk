/* tslint:disable */
/* eslint-disable */
/*
Terminal API

Terminal is a unified API that makes it easy to integrate with the leading telematics service providers.

Contact Support:
 Name: Terminal
 Email: connect@withterminal.com

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TrailersApi - axios parameter creator
 * @export
 */
export const TrailersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List Trailers
         * @summary List Trailers
         * @param {string} [limit] The maximum number of results to return in a page.
         * @param {string} [cursor] Pagination cursor to start requests from
         * @param {string} [expand] Expand resources in the returned response
         * @param {string} [raw] Include raw responses used to normalize model. Used for debugging or accessing unique properties that are not unified.
         * @param {string} [modifiedAfter] Only include records that were last modified after a provided date.
         * @param {string} [modifiedBefore] Only include records that were last modified before a provided date.
         * @param {string} [connectionToken] (Required) The token returned when a user authenticated their account. This authorizes access to a specific account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTrailers: async (limit?: string, cursor?: string, expand?: string, raw?: string, modifiedAfter?: string, modifiedBefore?: string, connectionToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/trailers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (raw !== undefined) {
                localVarQueryParameter['raw'] = raw;
            }

            if (modifiedAfter !== undefined) {
                localVarQueryParameter['modifiedAfter'] = modifiedAfter;
            }

            if (modifiedBefore !== undefined) {
                localVarQueryParameter['modifiedBefore'] = modifiedBefore;
            }

            if (connectionToken != null) {
                localVarHeaderParameter['connection-token'] = String(connectionToken);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/trailers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Latest Trailer Locations
         * @summary Latest Trailer Locations
         * @param {string} [limit] The maximum number of results to return in a page.
         * @param {string} [cursor] Pagination cursor to start requests from
         * @param {string} [expand] Expand resources in the returned response
         * @param {string} [raw] Include raw responses used to normalize model. Used for debugging or accessing unique properties that are not unified.
         * @param {string} [connectionToken] (Required) The token returned when a user authenticated their account. This authorizes access to a specific account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLatestLocations: async (limit?: string, cursor?: string, expand?: string, raw?: string, connectionToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/trailers/locations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (raw !== undefined) {
                localVarQueryParameter['raw'] = raw;
            }

            if (connectionToken != null) {
                localVarHeaderParameter['connection-token'] = String(connectionToken);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/trailers/locations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TrailersApi - functional programming interface
 * @export
 */
export const TrailersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TrailersApiAxiosParamCreator(configuration)
    return {
        /**
         * List Trailers
         * @summary List Trailers
         * @param {TrailersApiGetAllTrailersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTrailers(requestParameters: TrailersApiGetAllTrailersRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllTrailers(requestParameters.limit, requestParameters.cursor, requestParameters.expand, requestParameters.raw, requestParameters.modifiedAfter, requestParameters.modifiedBefore, requestParameters.connectionToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Latest Trailer Locations
         * @summary Latest Trailer Locations
         * @param {TrailersApiListLatestLocationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listLatestLocations(requestParameters: TrailersApiListLatestLocationsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listLatestLocations(requestParameters.limit, requestParameters.cursor, requestParameters.expand, requestParameters.raw, requestParameters.connectionToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TrailersApi - factory interface
 * @export
 */
export const TrailersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TrailersApiFp(configuration)
    return {
        /**
         * List Trailers
         * @summary List Trailers
         * @param {TrailersApiGetAllTrailersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTrailers(requestParameters: TrailersApiGetAllTrailersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAllTrailers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Latest Trailer Locations
         * @summary Latest Trailer Locations
         * @param {TrailersApiListLatestLocationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listLatestLocations(requestParameters: TrailersApiListLatestLocationsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listLatestLocations(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAllTrailers operation in TrailersApi.
 * @export
 * @interface TrailersApiGetAllTrailersRequest
 */
export type TrailersApiGetAllTrailersRequest = {
    
    /**
    * The maximum number of results to return in a page.
    * @type {string}
    * @memberof TrailersApiGetAllTrailers
    */
    readonly limit?: string
    
    /**
    * Pagination cursor to start requests from
    * @type {string}
    * @memberof TrailersApiGetAllTrailers
    */
    readonly cursor?: string
    
    /**
    * Expand resources in the returned response
    * @type {string}
    * @memberof TrailersApiGetAllTrailers
    */
    readonly expand?: string
    
    /**
    * Include raw responses used to normalize model. Used for debugging or accessing unique properties that are not unified.
    * @type {string}
    * @memberof TrailersApiGetAllTrailers
    */
    readonly raw?: string
    
    /**
    * Only include records that were last modified after a provided date.
    * @type {string}
    * @memberof TrailersApiGetAllTrailers
    */
    readonly modifiedAfter?: string
    
    /**
    * Only include records that were last modified before a provided date.
    * @type {string}
    * @memberof TrailersApiGetAllTrailers
    */
    readonly modifiedBefore?: string
    
    /**
    * (Required) The token returned when a user authenticated their account. This authorizes access to a specific account.
    * @type {string}
    * @memberof TrailersApiGetAllTrailers
    */
    readonly connectionToken?: string
    
}

/**
 * Request parameters for listLatestLocations operation in TrailersApi.
 * @export
 * @interface TrailersApiListLatestLocationsRequest
 */
export type TrailersApiListLatestLocationsRequest = {
    
    /**
    * The maximum number of results to return in a page.
    * @type {string}
    * @memberof TrailersApiListLatestLocations
    */
    readonly limit?: string
    
    /**
    * Pagination cursor to start requests from
    * @type {string}
    * @memberof TrailersApiListLatestLocations
    */
    readonly cursor?: string
    
    /**
    * Expand resources in the returned response
    * @type {string}
    * @memberof TrailersApiListLatestLocations
    */
    readonly expand?: string
    
    /**
    * Include raw responses used to normalize model. Used for debugging or accessing unique properties that are not unified.
    * @type {string}
    * @memberof TrailersApiListLatestLocations
    */
    readonly raw?: string
    
    /**
    * (Required) The token returned when a user authenticated their account. This authorizes access to a specific account.
    * @type {string}
    * @memberof TrailersApiListLatestLocations
    */
    readonly connectionToken?: string
    
}

/**
 * TrailersApiGenerated - object-oriented interface
 * @export
 * @class TrailersApiGenerated
 * @extends {BaseAPI}
 */
export class TrailersApiGenerated extends BaseAPI {
    /**
     * List Trailers
     * @summary List Trailers
     * @param {TrailersApiGetAllTrailersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrailersApiGenerated
     */
    public getAllTrailers(requestParameters: TrailersApiGetAllTrailersRequest = {}, options?: AxiosRequestConfig) {
        return TrailersApiFp(this.configuration).getAllTrailers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Latest Trailer Locations
     * @summary Latest Trailer Locations
     * @param {TrailersApiListLatestLocationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrailersApiGenerated
     */
    public listLatestLocations(requestParameters: TrailersApiListLatestLocationsRequest = {}, options?: AxiosRequestConfig) {
        return TrailersApiFp(this.configuration).listLatestLocations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
