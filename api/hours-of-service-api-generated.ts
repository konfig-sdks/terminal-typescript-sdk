/* tslint:disable */
/* eslint-disable */
/*
Terminal API

Terminal is a unified API that makes it easy to integrate with the leading telematics service providers.

Contact Support:
 Name: Terminal
 Email: connect@withterminal.com

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * HoursOfServiceApi - axios parameter creator
 * @export
 */
export const HoursOfServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List available time for the driver. This endpoint provides live access to the driver\'s available time. Different than most endpoints, this endpoint calls the provider\'s API in real time to get the latest available time for the driver. This endpoint is useful for building real time applications that need to know the driver\'s available time.
         * @summary Available Time for Drivers
         * @param {string} [cursor] Pagination cursor to start requests from
         * @param {string} [limit] The maximum number of results to return in a page.
         * @param {string} [driverIds] Comma separated list of driver IDs to filter for
         * @param {string} [expand] Expand resources in the returned response
         * @param {string} [raw] Include raw responses used to normalize model. Used for debugging or accessing unique properties that are not unified.
         * @param {string} [connectionToken] (Required) The token returned when a user authenticated their account. This authorizes access to a specific account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableTime: async (cursor?: string, limit?: string, driverIds?: string, expand?: string, raw?: string, connectionToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/hos/available-time`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (driverIds !== undefined) {
                localVarQueryParameter['driverIds'] = driverIds;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (raw !== undefined) {
                localVarQueryParameter['raw'] = raw;
            }

            if (connectionToken != null) {
                localVarHeaderParameter['connection-token'] = String(connectionToken);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/hos/available-time',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List daily summary of hours of service. Each daily log represents the time a driver spent in each duty status for a given day.
         * @summary List HOS Daily Logs
         * @param {string} [cursor] Pagination cursor to start requests from
         * @param {string} [limit] The maximum number of results to return in a page.
         * @param {string} [startDate] Only include daily logs from on or after a specific date
         * @param {string} [endDate] Only include daily logs from on or before a specific date
         * @param {string} [modifiedAfter] Only include records that were last modified after a provided date.
         * @param {string} [modifiedBefore] Only include records that were last modified before a provided date.
         * @param {string} [driverIds] Comma separated list of driver IDs to filter for
         * @param {string} [raw] Include raw responses used to normalize model. Used for debugging or accessing unique properties that are not unified.
         * @param {string} [expand] Expand resources in the returned response
         * @param {string} [connectionToken] (Required) The token returned when a user authenticated their account. This authorizes access to a specific account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDailyLogs: async (cursor?: string, limit?: string, startDate?: string, endDate?: string, modifiedAfter?: string, modifiedBefore?: string, driverIds?: string, raw?: string, expand?: string, connectionToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/hos/daily-logs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (modifiedAfter !== undefined) {
                localVarQueryParameter['modifiedAfter'] = modifiedAfter;
            }

            if (modifiedBefore !== undefined) {
                localVarQueryParameter['modifiedBefore'] = modifiedBefore;
            }

            if (driverIds !== undefined) {
                localVarQueryParameter['driverIds'] = driverIds;
            }

            if (raw !== undefined) {
                localVarQueryParameter['raw'] = raw;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (connectionToken != null) {
                localVarHeaderParameter['connection-token'] = String(connectionToken);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/hos/daily-logs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all hours of service logs. Currently, HOS logs are tracked as the distinct changes in duty status. In the future we will be offering endpoints to expose current HOS status and historical daily summaries.
         * @summary List HOS Logs
         * @param {string} [cursor] Pagination cursor to start requests from
         * @param {string} [limit] The maximum number of results to return in a page.
         * @param {string} [startedAfter] Only include records of statuses that started after a provided date.
         * @param {string} [startedBefore] Only include records of statuses that started before a provided date.
         * @param {string} [modifiedAfter] Only include records that were last modified after a provided date.
         * @param {string} [modifiedBefore] Only include records that were last modified before a provided date.
         * @param {string} [driverIds] Comma separated list of driver IDs to filter for
         * @param {string} [expand] Expand resources in the returned response
         * @param {string} [raw] Include raw responses used to normalize model. Used for debugging or accessing unique properties that are not unified.
         * @param {string} [connectionToken] (Required) The token returned when a user authenticated their account. This authorizes access to a specific account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listHosLogs: async (cursor?: string, limit?: string, startedAfter?: string, startedBefore?: string, modifiedAfter?: string, modifiedBefore?: string, driverIds?: string, expand?: string, raw?: string, connectionToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/hos/logs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (startedAfter !== undefined) {
                localVarQueryParameter['startedAfter'] = startedAfter;
            }

            if (startedBefore !== undefined) {
                localVarQueryParameter['startedBefore'] = startedBefore;
            }

            if (modifiedAfter !== undefined) {
                localVarQueryParameter['modifiedAfter'] = modifiedAfter;
            }

            if (modifiedBefore !== undefined) {
                localVarQueryParameter['modifiedBefore'] = modifiedBefore;
            }

            if (driverIds !== undefined) {
                localVarQueryParameter['driverIds'] = driverIds;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (raw !== undefined) {
                localVarQueryParameter['raw'] = raw;
            }

            if (connectionToken != null) {
                localVarHeaderParameter['connection-token'] = String(connectionToken);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/hos/logs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HoursOfServiceApi - functional programming interface
 * @export
 */
export const HoursOfServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HoursOfServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * List available time for the driver. This endpoint provides live access to the driver\'s available time. Different than most endpoints, this endpoint calls the provider\'s API in real time to get the latest available time for the driver. This endpoint is useful for building real time applications that need to know the driver\'s available time.
         * @summary Available Time for Drivers
         * @param {HoursOfServiceApiGetAvailableTimeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvailableTime(requestParameters: HoursOfServiceApiGetAvailableTimeRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAvailableTime(requestParameters.cursor, requestParameters.limit, requestParameters.driverIds, requestParameters.expand, requestParameters.raw, requestParameters.connectionToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List daily summary of hours of service. Each daily log represents the time a driver spent in each duty status for a given day.
         * @summary List HOS Daily Logs
         * @param {HoursOfServiceApiGetDailyLogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDailyLogs(requestParameters: HoursOfServiceApiGetDailyLogsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDailyLogs(requestParameters.cursor, requestParameters.limit, requestParameters.startDate, requestParameters.endDate, requestParameters.modifiedAfter, requestParameters.modifiedBefore, requestParameters.driverIds, requestParameters.raw, requestParameters.expand, requestParameters.connectionToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all hours of service logs. Currently, HOS logs are tracked as the distinct changes in duty status. In the future we will be offering endpoints to expose current HOS status and historical daily summaries.
         * @summary List HOS Logs
         * @param {HoursOfServiceApiListHosLogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listHosLogs(requestParameters: HoursOfServiceApiListHosLogsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listHosLogs(requestParameters.cursor, requestParameters.limit, requestParameters.startedAfter, requestParameters.startedBefore, requestParameters.modifiedAfter, requestParameters.modifiedBefore, requestParameters.driverIds, requestParameters.expand, requestParameters.raw, requestParameters.connectionToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HoursOfServiceApi - factory interface
 * @export
 */
export const HoursOfServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HoursOfServiceApiFp(configuration)
    return {
        /**
         * List available time for the driver. This endpoint provides live access to the driver\'s available time. Different than most endpoints, this endpoint calls the provider\'s API in real time to get the latest available time for the driver. This endpoint is useful for building real time applications that need to know the driver\'s available time.
         * @summary Available Time for Drivers
         * @param {HoursOfServiceApiGetAvailableTimeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableTime(requestParameters: HoursOfServiceApiGetAvailableTimeRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAvailableTime(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List daily summary of hours of service. Each daily log represents the time a driver spent in each duty status for a given day.
         * @summary List HOS Daily Logs
         * @param {HoursOfServiceApiGetDailyLogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDailyLogs(requestParameters: HoursOfServiceApiGetDailyLogsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getDailyLogs(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all hours of service logs. Currently, HOS logs are tracked as the distinct changes in duty status. In the future we will be offering endpoints to expose current HOS status and historical daily summaries.
         * @summary List HOS Logs
         * @param {HoursOfServiceApiListHosLogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listHosLogs(requestParameters: HoursOfServiceApiListHosLogsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listHosLogs(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAvailableTime operation in HoursOfServiceApi.
 * @export
 * @interface HoursOfServiceApiGetAvailableTimeRequest
 */
export type HoursOfServiceApiGetAvailableTimeRequest = {
    
    /**
    * Pagination cursor to start requests from
    * @type {string}
    * @memberof HoursOfServiceApiGetAvailableTime
    */
    readonly cursor?: string
    
    /**
    * The maximum number of results to return in a page.
    * @type {string}
    * @memberof HoursOfServiceApiGetAvailableTime
    */
    readonly limit?: string
    
    /**
    * Comma separated list of driver IDs to filter for
    * @type {string}
    * @memberof HoursOfServiceApiGetAvailableTime
    */
    readonly driverIds?: string
    
    /**
    * Expand resources in the returned response
    * @type {string}
    * @memberof HoursOfServiceApiGetAvailableTime
    */
    readonly expand?: string
    
    /**
    * Include raw responses used to normalize model. Used for debugging or accessing unique properties that are not unified.
    * @type {string}
    * @memberof HoursOfServiceApiGetAvailableTime
    */
    readonly raw?: string
    
    /**
    * (Required) The token returned when a user authenticated their account. This authorizes access to a specific account.
    * @type {string}
    * @memberof HoursOfServiceApiGetAvailableTime
    */
    readonly connectionToken?: string
    
}

/**
 * Request parameters for getDailyLogs operation in HoursOfServiceApi.
 * @export
 * @interface HoursOfServiceApiGetDailyLogsRequest
 */
export type HoursOfServiceApiGetDailyLogsRequest = {
    
    /**
    * Pagination cursor to start requests from
    * @type {string}
    * @memberof HoursOfServiceApiGetDailyLogs
    */
    readonly cursor?: string
    
    /**
    * The maximum number of results to return in a page.
    * @type {string}
    * @memberof HoursOfServiceApiGetDailyLogs
    */
    readonly limit?: string
    
    /**
    * Only include daily logs from on or after a specific date
    * @type {string}
    * @memberof HoursOfServiceApiGetDailyLogs
    */
    readonly startDate?: string
    
    /**
    * Only include daily logs from on or before a specific date
    * @type {string}
    * @memberof HoursOfServiceApiGetDailyLogs
    */
    readonly endDate?: string
    
    /**
    * Only include records that were last modified after a provided date.
    * @type {string}
    * @memberof HoursOfServiceApiGetDailyLogs
    */
    readonly modifiedAfter?: string
    
    /**
    * Only include records that were last modified before a provided date.
    * @type {string}
    * @memberof HoursOfServiceApiGetDailyLogs
    */
    readonly modifiedBefore?: string
    
    /**
    * Comma separated list of driver IDs to filter for
    * @type {string}
    * @memberof HoursOfServiceApiGetDailyLogs
    */
    readonly driverIds?: string
    
    /**
    * Include raw responses used to normalize model. Used for debugging or accessing unique properties that are not unified.
    * @type {string}
    * @memberof HoursOfServiceApiGetDailyLogs
    */
    readonly raw?: string
    
    /**
    * Expand resources in the returned response
    * @type {string}
    * @memberof HoursOfServiceApiGetDailyLogs
    */
    readonly expand?: string
    
    /**
    * (Required) The token returned when a user authenticated their account. This authorizes access to a specific account.
    * @type {string}
    * @memberof HoursOfServiceApiGetDailyLogs
    */
    readonly connectionToken?: string
    
}

/**
 * Request parameters for listHosLogs operation in HoursOfServiceApi.
 * @export
 * @interface HoursOfServiceApiListHosLogsRequest
 */
export type HoursOfServiceApiListHosLogsRequest = {
    
    /**
    * Pagination cursor to start requests from
    * @type {string}
    * @memberof HoursOfServiceApiListHosLogs
    */
    readonly cursor?: string
    
    /**
    * The maximum number of results to return in a page.
    * @type {string}
    * @memberof HoursOfServiceApiListHosLogs
    */
    readonly limit?: string
    
    /**
    * Only include records of statuses that started after a provided date.
    * @type {string}
    * @memberof HoursOfServiceApiListHosLogs
    */
    readonly startedAfter?: string
    
    /**
    * Only include records of statuses that started before a provided date.
    * @type {string}
    * @memberof HoursOfServiceApiListHosLogs
    */
    readonly startedBefore?: string
    
    /**
    * Only include records that were last modified after a provided date.
    * @type {string}
    * @memberof HoursOfServiceApiListHosLogs
    */
    readonly modifiedAfter?: string
    
    /**
    * Only include records that were last modified before a provided date.
    * @type {string}
    * @memberof HoursOfServiceApiListHosLogs
    */
    readonly modifiedBefore?: string
    
    /**
    * Comma separated list of driver IDs to filter for
    * @type {string}
    * @memberof HoursOfServiceApiListHosLogs
    */
    readonly driverIds?: string
    
    /**
    * Expand resources in the returned response
    * @type {string}
    * @memberof HoursOfServiceApiListHosLogs
    */
    readonly expand?: string
    
    /**
    * Include raw responses used to normalize model. Used for debugging or accessing unique properties that are not unified.
    * @type {string}
    * @memberof HoursOfServiceApiListHosLogs
    */
    readonly raw?: string
    
    /**
    * (Required) The token returned when a user authenticated their account. This authorizes access to a specific account.
    * @type {string}
    * @memberof HoursOfServiceApiListHosLogs
    */
    readonly connectionToken?: string
    
}

/**
 * HoursOfServiceApiGenerated - object-oriented interface
 * @export
 * @class HoursOfServiceApiGenerated
 * @extends {BaseAPI}
 */
export class HoursOfServiceApiGenerated extends BaseAPI {
    /**
     * List available time for the driver. This endpoint provides live access to the driver\'s available time. Different than most endpoints, this endpoint calls the provider\'s API in real time to get the latest available time for the driver. This endpoint is useful for building real time applications that need to know the driver\'s available time.
     * @summary Available Time for Drivers
     * @param {HoursOfServiceApiGetAvailableTimeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HoursOfServiceApiGenerated
     */
    public getAvailableTime(requestParameters: HoursOfServiceApiGetAvailableTimeRequest = {}, options?: AxiosRequestConfig) {
        return HoursOfServiceApiFp(this.configuration).getAvailableTime(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List daily summary of hours of service. Each daily log represents the time a driver spent in each duty status for a given day.
     * @summary List HOS Daily Logs
     * @param {HoursOfServiceApiGetDailyLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HoursOfServiceApiGenerated
     */
    public getDailyLogs(requestParameters: HoursOfServiceApiGetDailyLogsRequest = {}, options?: AxiosRequestConfig) {
        return HoursOfServiceApiFp(this.configuration).getDailyLogs(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all hours of service logs. Currently, HOS logs are tracked as the distinct changes in duty status. In the future we will be offering endpoints to expose current HOS status and historical daily summaries.
     * @summary List HOS Logs
     * @param {HoursOfServiceApiListHosLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HoursOfServiceApiGenerated
     */
    public listHosLogs(requestParameters: HoursOfServiceApiListHosLogsRequest = {}, options?: AxiosRequestConfig) {
        return HoursOfServiceApiFp(this.configuration).listHosLogs(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
