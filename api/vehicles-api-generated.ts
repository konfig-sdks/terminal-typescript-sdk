/* tslint:disable */
/* eslint-disable */
/*
Terminal API

Terminal is a unified API that makes it easy to integrate with the leading telematics service providers.

Contact Support:
 Name: Terminal
 Email: connect@withterminal.com

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * VehiclesApi - axios parameter creator
 * @export
 */
export const VehiclesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List all of the vehicles in the connected account
         * @summary List Vehicles
         * @param {string} [cursor] Pagination cursor to start requests from
         * @param {string} [limit] The maximum number of results to return in a page.
         * @param {string} [modifiedAfter] Only include records that were last modified after a provided date.
         * @param {string} [modifiedBefore] Only include records that were last modified before a provided date.
         * @param {string} [raw] Include raw responses used to normalize model. Used for debugging or accessing unique properties that are not unified.
         * @param {string} [expand] Expand resources in the returned response
         * @param {string} [connectionToken] (Required) The token returned when a user authenticated their account. This authorizes access to a specific account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll: async (cursor?: string, limit?: string, modifiedAfter?: string, modifiedBefore?: string, raw?: string, expand?: string, connectionToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vehicles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (modifiedAfter !== undefined) {
                localVarQueryParameter['modifiedAfter'] = modifiedAfter;
            }

            if (modifiedBefore !== undefined) {
                localVarQueryParameter['modifiedBefore'] = modifiedBefore;
            }

            if (raw !== undefined) {
                localVarQueryParameter['raw'] = raw;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (connectionToken != null) {
                localVarHeaderParameter['connection-token'] = String(connectionToken);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/vehicles',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the details of a specific vehicle
         * @summary Get Vehicle
         * @param {string} id (Required) 
         * @param {string} [raw] Include raw responses used to normalize model. Used for debugging or accessing unique properties that are not unified.
         * @param {string} [expand] Expand resources in the returned response
         * @param {string} [connectionToken] (Required) The token returned when a user authenticated their account. This authorizes access to a specific account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails: async (id: string, raw?: string, expand?: string, connectionToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDetails', 'id', id)
            const localVarPath = `/vehicles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (raw !== undefined) {
                localVarQueryParameter['raw'] = raw;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (connectionToken != null) {
                localVarHeaderParameter['connection-token'] = String(connectionToken);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/vehicles/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List historical stats and logs about the vehicle.
         * @summary Historical Vehicle Stats
         * @param {string} vehicleId (Required) 
         * @param {string} [cursor] Pagination cursor to start requests from
         * @param {string} [limit] The maximum number of results to return in a page.
         * @param {string} [expand] Expand resources in the returned response
         * @param {string} [startAt] Timestamp to start from - defaults to &#x60;TODAY - 1 MONTH&#x60;
         * @param {string} [endAt] Timestamp to end at - defaults to &#x60;TODAY&#x60;
         * @param {string} [types] Comma separated list of vehicle stats to filter for
         * @param {string} [raw] Include raw responses used to normalize model. Used for debugging or accessing unique properties that are not unified.
         * @param {string} [connectionToken] (Required) The token returned when a user authenticated their account. This authorizes access to a specific account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricalStats: async (vehicleId: string, cursor?: string, limit?: string, expand?: string, startAt?: string, endAt?: string, types?: string, raw?: string, connectionToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vehicleId' is not null or undefined
            assertParamExists('getHistoricalStats', 'vehicleId', vehicleId)
            const localVarPath = `/vehicles/{vehicleId}/stats/historical`
                .replace(`{${"vehicleId"}}`, encodeURIComponent(String(vehicleId !== undefined ? vehicleId : `-vehicleId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (startAt !== undefined) {
                localVarQueryParameter['startAt'] = startAt;
            }

            if (endAt !== undefined) {
                localVarQueryParameter['endAt'] = endAt;
            }

            if (types !== undefined) {
                localVarQueryParameter['types'] = types;
            }

            if (raw !== undefined) {
                localVarQueryParameter['raw'] = raw;
            }

            if (connectionToken != null) {
                localVarHeaderParameter['connection-token'] = String(connectionToken);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/vehicles/{vehicleId}/stats/historical',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the latest location of the vehicles in the connected account. This endpoint will call the provider\'s API in real time to get the latest location of the vehicle.  _Please note: this endpoint will exclude vehicles that have no last known location._
         * @summary Latest Vehicle Locations
         * @param {string} [cursor] Pagination cursor to start requests from
         * @param {string} [limit] The maximum number of results to return in a page.
         * @param {string} [raw] Include raw responses used to normalize model. Used for debugging or accessing unique properties that are not unified.
         * @param {string} [vehicleIds] Comma separated list of vehicle IDs to filter for
         * @param {string} [expand] Expand resources in the returned response
         * @param {string} [connectionToken] (Required) The token returned when a user authenticated their account. This authorizes access to a specific account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestLocations: async (cursor?: string, limit?: string, raw?: string, vehicleIds?: string, expand?: string, connectionToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vehicles/locations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (raw !== undefined) {
                localVarQueryParameter['raw'] = raw;
            }

            if (vehicleIds !== undefined) {
                localVarQueryParameter['vehicleIds'] = vehicleIds;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (connectionToken != null) {
                localVarHeaderParameter['connection-token'] = String(connectionToken);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/vehicles/locations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the historical breadcrumb locations for a vehicle.  _Note:_  Given the large volume of location data available, we encourage customers to accept compressed (`gzip`) responses in order to maximize throughput. This is supported with many popular HTTP clients. Result limits vary depending on if results are compressed or not.
         * @summary Historical Vehicle Locations
         * @param {string} vehicleId (Required) Vehicle to retrieve breadcrumb locations for
         * @param {string} [cursor] Pagination cursor to start requests from
         * @param {string} [limit] The maximum number of results to return in a page.
         * @param {string} [startAt] Timestamp to start from - defaults to &#x60;TODAY - 1 MONTH&#x60;
         * @param {string} [endAt] Timestamp to end at - defaults to &#x60;TODAY&#x60;
         * @param {string} [raw] Include raw responses used to normalize model. Used for debugging or accessing unique properties that are not unified.
         * @param {string} [connectionToken] (Required) The token returned when a user authenticated their account. This authorizes access to a specific account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listHistoricalLocations: async (vehicleId: string, cursor?: string, limit?: string, startAt?: string, endAt?: string, raw?: string, connectionToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vehicleId' is not null or undefined
            assertParamExists('listHistoricalLocations', 'vehicleId', vehicleId)
            const localVarPath = `/vehicles/{vehicleId}/locations`
                .replace(`{${"vehicleId"}}`, encodeURIComponent(String(vehicleId !== undefined ? vehicleId : `-vehicleId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (startAt !== undefined) {
                localVarQueryParameter['startAt'] = startAt;
            }

            if (endAt !== undefined) {
                localVarQueryParameter['endAt'] = endAt;
            }

            if (raw !== undefined) {
                localVarQueryParameter['raw'] = raw;
            }

            if (connectionToken != null) {
                localVarHeaderParameter['connection-token'] = String(connectionToken);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/vehicles/{vehicleId}/locations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VehiclesApi - functional programming interface
 * @export
 */
export const VehiclesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VehiclesApiAxiosParamCreator(configuration)
    return {
        /**
         * List all of the vehicles in the connected account
         * @summary List Vehicles
         * @param {VehiclesApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll(requestParameters: VehiclesApiGetAllRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(requestParameters.cursor, requestParameters.limit, requestParameters.modifiedAfter, requestParameters.modifiedBefore, requestParameters.raw, requestParameters.expand, requestParameters.connectionToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the details of a specific vehicle
         * @summary Get Vehicle
         * @param {VehiclesApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetails(requestParameters: VehiclesApiGetDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetails(requestParameters.id, requestParameters.raw, requestParameters.expand, requestParameters.connectionToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List historical stats and logs about the vehicle.
         * @summary Historical Vehicle Stats
         * @param {VehiclesApiGetHistoricalStatsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHistoricalStats(requestParameters: VehiclesApiGetHistoricalStatsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHistoricalStats(requestParameters.vehicleId, requestParameters.cursor, requestParameters.limit, requestParameters.expand, requestParameters.startAt, requestParameters.endAt, requestParameters.types, requestParameters.raw, requestParameters.connectionToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the latest location of the vehicles in the connected account. This endpoint will call the provider\'s API in real time to get the latest location of the vehicle.  _Please note: this endpoint will exclude vehicles that have no last known location._
         * @summary Latest Vehicle Locations
         * @param {VehiclesApiGetLatestLocationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLatestLocations(requestParameters: VehiclesApiGetLatestLocationsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLatestLocations(requestParameters.cursor, requestParameters.limit, requestParameters.raw, requestParameters.vehicleIds, requestParameters.expand, requestParameters.connectionToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the historical breadcrumb locations for a vehicle.  _Note:_  Given the large volume of location data available, we encourage customers to accept compressed (`gzip`) responses in order to maximize throughput. This is supported with many popular HTTP clients. Result limits vary depending on if results are compressed or not.
         * @summary Historical Vehicle Locations
         * @param {VehiclesApiListHistoricalLocationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listHistoricalLocations(requestParameters: VehiclesApiListHistoricalLocationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listHistoricalLocations(requestParameters.vehicleId, requestParameters.cursor, requestParameters.limit, requestParameters.startAt, requestParameters.endAt, requestParameters.raw, requestParameters.connectionToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VehiclesApi - factory interface
 * @export
 */
export const VehiclesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VehiclesApiFp(configuration)
    return {
        /**
         * List all of the vehicles in the connected account
         * @summary List Vehicles
         * @param {VehiclesApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(requestParameters: VehiclesApiGetAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the details of a specific vehicle
         * @summary Get Vehicle
         * @param {VehiclesApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails(requestParameters: VehiclesApiGetDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List historical stats and logs about the vehicle.
         * @summary Historical Vehicle Stats
         * @param {VehiclesApiGetHistoricalStatsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHistoricalStats(requestParameters: VehiclesApiGetHistoricalStatsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getHistoricalStats(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the latest location of the vehicles in the connected account. This endpoint will call the provider\'s API in real time to get the latest location of the vehicle.  _Please note: this endpoint will exclude vehicles that have no last known location._
         * @summary Latest Vehicle Locations
         * @param {VehiclesApiGetLatestLocationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestLocations(requestParameters: VehiclesApiGetLatestLocationsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getLatestLocations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the historical breadcrumb locations for a vehicle.  _Note:_  Given the large volume of location data available, we encourage customers to accept compressed (`gzip`) responses in order to maximize throughput. This is supported with many popular HTTP clients. Result limits vary depending on if results are compressed or not.
         * @summary Historical Vehicle Locations
         * @param {VehiclesApiListHistoricalLocationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listHistoricalLocations(requestParameters: VehiclesApiListHistoricalLocationsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listHistoricalLocations(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAll operation in VehiclesApi.
 * @export
 * @interface VehiclesApiGetAllRequest
 */
export type VehiclesApiGetAllRequest = {
    
    /**
    * Pagination cursor to start requests from
    * @type {string}
    * @memberof VehiclesApiGetAll
    */
    readonly cursor?: string
    
    /**
    * The maximum number of results to return in a page.
    * @type {string}
    * @memberof VehiclesApiGetAll
    */
    readonly limit?: string
    
    /**
    * Only include records that were last modified after a provided date.
    * @type {string}
    * @memberof VehiclesApiGetAll
    */
    readonly modifiedAfter?: string
    
    /**
    * Only include records that were last modified before a provided date.
    * @type {string}
    * @memberof VehiclesApiGetAll
    */
    readonly modifiedBefore?: string
    
    /**
    * Include raw responses used to normalize model. Used for debugging or accessing unique properties that are not unified.
    * @type {string}
    * @memberof VehiclesApiGetAll
    */
    readonly raw?: string
    
    /**
    * Expand resources in the returned response
    * @type {string}
    * @memberof VehiclesApiGetAll
    */
    readonly expand?: string
    
    /**
    * (Required) The token returned when a user authenticated their account. This authorizes access to a specific account.
    * @type {string}
    * @memberof VehiclesApiGetAll
    */
    readonly connectionToken?: string
    
}

/**
 * Request parameters for getDetails operation in VehiclesApi.
 * @export
 * @interface VehiclesApiGetDetailsRequest
 */
export type VehiclesApiGetDetailsRequest = {
    
    /**
    * (Required) 
    * @type {string}
    * @memberof VehiclesApiGetDetails
    */
    readonly id: string
    
    /**
    * Include raw responses used to normalize model. Used for debugging or accessing unique properties that are not unified.
    * @type {string}
    * @memberof VehiclesApiGetDetails
    */
    readonly raw?: string
    
    /**
    * Expand resources in the returned response
    * @type {string}
    * @memberof VehiclesApiGetDetails
    */
    readonly expand?: string
    
    /**
    * (Required) The token returned when a user authenticated their account. This authorizes access to a specific account.
    * @type {string}
    * @memberof VehiclesApiGetDetails
    */
    readonly connectionToken?: string
    
}

/**
 * Request parameters for getHistoricalStats operation in VehiclesApi.
 * @export
 * @interface VehiclesApiGetHistoricalStatsRequest
 */
export type VehiclesApiGetHistoricalStatsRequest = {
    
    /**
    * (Required) 
    * @type {string}
    * @memberof VehiclesApiGetHistoricalStats
    */
    readonly vehicleId: string
    
    /**
    * Pagination cursor to start requests from
    * @type {string}
    * @memberof VehiclesApiGetHistoricalStats
    */
    readonly cursor?: string
    
    /**
    * The maximum number of results to return in a page.
    * @type {string}
    * @memberof VehiclesApiGetHistoricalStats
    */
    readonly limit?: string
    
    /**
    * Expand resources in the returned response
    * @type {string}
    * @memberof VehiclesApiGetHistoricalStats
    */
    readonly expand?: string
    
    /**
    * Timestamp to start from - defaults to `TODAY - 1 MONTH`
    * @type {string}
    * @memberof VehiclesApiGetHistoricalStats
    */
    readonly startAt?: string
    
    /**
    * Timestamp to end at - defaults to `TODAY`
    * @type {string}
    * @memberof VehiclesApiGetHistoricalStats
    */
    readonly endAt?: string
    
    /**
    * Comma separated list of vehicle stats to filter for
    * @type {string}
    * @memberof VehiclesApiGetHistoricalStats
    */
    readonly types?: string
    
    /**
    * Include raw responses used to normalize model. Used for debugging or accessing unique properties that are not unified.
    * @type {string}
    * @memberof VehiclesApiGetHistoricalStats
    */
    readonly raw?: string
    
    /**
    * (Required) The token returned when a user authenticated their account. This authorizes access to a specific account.
    * @type {string}
    * @memberof VehiclesApiGetHistoricalStats
    */
    readonly connectionToken?: string
    
}

/**
 * Request parameters for getLatestLocations operation in VehiclesApi.
 * @export
 * @interface VehiclesApiGetLatestLocationsRequest
 */
export type VehiclesApiGetLatestLocationsRequest = {
    
    /**
    * Pagination cursor to start requests from
    * @type {string}
    * @memberof VehiclesApiGetLatestLocations
    */
    readonly cursor?: string
    
    /**
    * The maximum number of results to return in a page.
    * @type {string}
    * @memberof VehiclesApiGetLatestLocations
    */
    readonly limit?: string
    
    /**
    * Include raw responses used to normalize model. Used for debugging or accessing unique properties that are not unified.
    * @type {string}
    * @memberof VehiclesApiGetLatestLocations
    */
    readonly raw?: string
    
    /**
    * Comma separated list of vehicle IDs to filter for
    * @type {string}
    * @memberof VehiclesApiGetLatestLocations
    */
    readonly vehicleIds?: string
    
    /**
    * Expand resources in the returned response
    * @type {string}
    * @memberof VehiclesApiGetLatestLocations
    */
    readonly expand?: string
    
    /**
    * (Required) The token returned when a user authenticated their account. This authorizes access to a specific account.
    * @type {string}
    * @memberof VehiclesApiGetLatestLocations
    */
    readonly connectionToken?: string
    
}

/**
 * Request parameters for listHistoricalLocations operation in VehiclesApi.
 * @export
 * @interface VehiclesApiListHistoricalLocationsRequest
 */
export type VehiclesApiListHistoricalLocationsRequest = {
    
    /**
    * (Required) Vehicle to retrieve breadcrumb locations for
    * @type {string}
    * @memberof VehiclesApiListHistoricalLocations
    */
    readonly vehicleId: string
    
    /**
    * Pagination cursor to start requests from
    * @type {string}
    * @memberof VehiclesApiListHistoricalLocations
    */
    readonly cursor?: string
    
    /**
    * The maximum number of results to return in a page.
    * @type {string}
    * @memberof VehiclesApiListHistoricalLocations
    */
    readonly limit?: string
    
    /**
    * Timestamp to start from - defaults to `TODAY - 1 MONTH`
    * @type {string}
    * @memberof VehiclesApiListHistoricalLocations
    */
    readonly startAt?: string
    
    /**
    * Timestamp to end at - defaults to `TODAY`
    * @type {string}
    * @memberof VehiclesApiListHistoricalLocations
    */
    readonly endAt?: string
    
    /**
    * Include raw responses used to normalize model. Used for debugging or accessing unique properties that are not unified.
    * @type {string}
    * @memberof VehiclesApiListHistoricalLocations
    */
    readonly raw?: string
    
    /**
    * (Required) The token returned when a user authenticated their account. This authorizes access to a specific account.
    * @type {string}
    * @memberof VehiclesApiListHistoricalLocations
    */
    readonly connectionToken?: string
    
}

/**
 * VehiclesApiGenerated - object-oriented interface
 * @export
 * @class VehiclesApiGenerated
 * @extends {BaseAPI}
 */
export class VehiclesApiGenerated extends BaseAPI {
    /**
     * List all of the vehicles in the connected account
     * @summary List Vehicles
     * @param {VehiclesApiGetAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehiclesApiGenerated
     */
    public getAll(requestParameters: VehiclesApiGetAllRequest = {}, options?: AxiosRequestConfig) {
        return VehiclesApiFp(this.configuration).getAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the details of a specific vehicle
     * @summary Get Vehicle
     * @param {VehiclesApiGetDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehiclesApiGenerated
     */
    public getDetails(requestParameters: VehiclesApiGetDetailsRequest, options?: AxiosRequestConfig) {
        return VehiclesApiFp(this.configuration).getDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List historical stats and logs about the vehicle.
     * @summary Historical Vehicle Stats
     * @param {VehiclesApiGetHistoricalStatsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehiclesApiGenerated
     */
    public getHistoricalStats(requestParameters: VehiclesApiGetHistoricalStatsRequest, options?: AxiosRequestConfig) {
        return VehiclesApiFp(this.configuration).getHistoricalStats(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the latest location of the vehicles in the connected account. This endpoint will call the provider\'s API in real time to get the latest location of the vehicle.  _Please note: this endpoint will exclude vehicles that have no last known location._
     * @summary Latest Vehicle Locations
     * @param {VehiclesApiGetLatestLocationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehiclesApiGenerated
     */
    public getLatestLocations(requestParameters: VehiclesApiGetLatestLocationsRequest = {}, options?: AxiosRequestConfig) {
        return VehiclesApiFp(this.configuration).getLatestLocations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the historical breadcrumb locations for a vehicle.  _Note:_  Given the large volume of location data available, we encourage customers to accept compressed (`gzip`) responses in order to maximize throughput. This is supported with many popular HTTP clients. Result limits vary depending on if results are compressed or not.
     * @summary Historical Vehicle Locations
     * @param {VehiclesApiListHistoricalLocationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehiclesApiGenerated
     */
    public listHistoricalLocations(requestParameters: VehiclesApiListHistoricalLocationsRequest, options?: AxiosRequestConfig) {
        return VehiclesApiFp(this.configuration).listHistoricalLocations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
