/* tslint:disable */
/* eslint-disable */
/*
Terminal API

Terminal is a unified API that makes it easy to integrate with the leading telematics service providers.

Contact Support:
 Name: Terminal
 Email: connect@withterminal.com

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ConnectionsCreateCustomConnectionRequest } from '../models';
// @ts-ignore
import { ConnectionsCreateCustomConnectionRequestBackfill } from '../models';
// @ts-ignore
import { ConnectionsCreateCustomConnectionRequestCompany } from '../models';
// @ts-ignore
import { ConnectionsCreateCustomConnectionRequestCredentials } from '../models';
// @ts-ignore
import { ConnectionsUpdateCurrentConnectionDetailsRequest } from '../models';
// @ts-ignore
import { ConnectionsUpdateCurrentConnectionDetailsRequestCompany } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ConnectionsApi - axios parameter creator
 * @export
 */
export const ConnectionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new connection via API. This endpoint can be used to provide a completely custom connection creation experience for your customers.  For most use cases we recommend using the [Link UI](./rhuaxk9205cn8-link-component) to create connections.
         * @summary Create Connection
         * @param {ConnectionsCreateCustomConnectionRequest} [connectionsCreateCustomConnectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomConnection: async (connectionsCreateCustomConnectionRequest?: ConnectionsCreateCustomConnectionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/connections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: connectionsCreateCustomConnectionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/connections',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(connectionsCreateCustomConnectionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the details of the current active connection. The current connection is derived from the provided connection token.
         * @summary Get Current Connection
         * @param {string} [connectionToken] (Required) The token returned when a user authenticated their account. This authorizes access to a specific account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentDetails: async (connectionToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/connections/current`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (connectionToken != null) {
                localVarHeaderParameter['connection-token'] = String(connectionToken);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/connections/current',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all of the connections you have for your application. Connections represent the authenticated access you have to your customer\'s TSP data.
         * @summary List All Connections
         * @param {string} [cursor] Pagination cursor to start requests from
         * @param {string} [limit] The maximum number of results to return in a page.
         * @param {string} [externalId] 
         * @param {string} [dotNumber] 
         * @param {string} [tag] Filter connections by tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll: async (cursor?: string, limit?: string, externalId?: string, dotNumber?: string, tag?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/connections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (externalId !== undefined) {
                localVarQueryParameter['externalId'] = externalId;
            }

            if (dotNumber !== undefined) {
                localVarQueryParameter['dotNumber'] = dotNumber;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/connections',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the details of the current active connection. The current connection is derived from the provided connection token.
         * @summary Update Current Connection
         * @param {string} [connectionToken] (Required) The token returned when a user authenticated their account. This authorizes access to a specific account.
         * @param {ConnectionsUpdateCurrentConnectionDetailsRequest} [connectionsUpdateCurrentConnectionDetailsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCurrentConnectionDetails: async (connectionToken?: string, connectionsUpdateCurrentConnectionDetailsRequest?: ConnectionsUpdateCurrentConnectionDetailsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/connections/current`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (connectionToken != null) {
                localVarHeaderParameter['connection-token'] = String(connectionToken);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: connectionsUpdateCurrentConnectionDetailsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/connections/current',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(connectionsUpdateCurrentConnectionDetailsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConnectionsApi - functional programming interface
 * @export
 */
export const ConnectionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConnectionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new connection via API. This endpoint can be used to provide a completely custom connection creation experience for your customers.  For most use cases we recommend using the [Link UI](./rhuaxk9205cn8-link-component) to create connections.
         * @summary Create Connection
         * @param {ConnectionsApiCreateCustomConnectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCustomConnection(requestParameters: ConnectionsApiCreateCustomConnectionRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const connectionsCreateCustomConnectionRequest: ConnectionsCreateCustomConnectionRequest = {
                tags: requestParameters.tags,
                backfill: requestParameters.backfill,
                company: requestParameters.company,
                credentials: requestParameters.credentials,
                externalId: requestParameters.externalId,
                provider: requestParameters.provider,
                syncMode: requestParameters.syncMode
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCustomConnection(connectionsCreateCustomConnectionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the details of the current active connection. The current connection is derived from the provided connection token.
         * @summary Get Current Connection
         * @param {ConnectionsApiGetCurrentDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentDetails(requestParameters: ConnectionsApiGetCurrentDetailsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentDetails(requestParameters.connectionToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all of the connections you have for your application. Connections represent the authenticated access you have to your customer\'s TSP data.
         * @summary List All Connections
         * @param {ConnectionsApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAll(requestParameters: ConnectionsApiListAllRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAll(requestParameters.cursor, requestParameters.limit, requestParameters.externalId, requestParameters.dotNumber, requestParameters.tag, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the details of the current active connection. The current connection is derived from the provided connection token.
         * @summary Update Current Connection
         * @param {ConnectionsApiUpdateCurrentConnectionDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCurrentConnectionDetails(requestParameters: ConnectionsApiUpdateCurrentConnectionDetailsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const connectionsUpdateCurrentConnectionDetailsRequest: ConnectionsUpdateCurrentConnectionDetailsRequest = {
                tags: requestParameters.tags,
                company: requestParameters.company,
                externalId: requestParameters.externalId,
                status: requestParameters.status,
                syncMode: requestParameters.syncMode
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCurrentConnectionDetails(requestParameters.connectionToken, connectionsUpdateCurrentConnectionDetailsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ConnectionsApi - factory interface
 * @export
 */
export const ConnectionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConnectionsApiFp(configuration)
    return {
        /**
         * Create a new connection via API. This endpoint can be used to provide a completely custom connection creation experience for your customers.  For most use cases we recommend using the [Link UI](./rhuaxk9205cn8-link-component) to create connections.
         * @summary Create Connection
         * @param {ConnectionsApiCreateCustomConnectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCustomConnection(requestParameters: ConnectionsApiCreateCustomConnectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createCustomConnection(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the details of the current active connection. The current connection is derived from the provided connection token.
         * @summary Get Current Connection
         * @param {ConnectionsApiGetCurrentDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentDetails(requestParameters: ConnectionsApiGetCurrentDetailsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getCurrentDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all of the connections you have for your application. Connections represent the authenticated access you have to your customer\'s TSP data.
         * @summary List All Connections
         * @param {ConnectionsApiListAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAll(requestParameters: ConnectionsApiListAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the details of the current active connection. The current connection is derived from the provided connection token.
         * @summary Update Current Connection
         * @param {ConnectionsApiUpdateCurrentConnectionDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCurrentConnectionDetails(requestParameters: ConnectionsApiUpdateCurrentConnectionDetailsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateCurrentConnectionDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createCustomConnection operation in ConnectionsApi.
 * @export
 * @interface ConnectionsApiCreateCustomConnectionRequest
 */
export type ConnectionsApiCreateCustomConnectionRequest = {
    
} & ConnectionsCreateCustomConnectionRequest

/**
 * Request parameters for getCurrentDetails operation in ConnectionsApi.
 * @export
 * @interface ConnectionsApiGetCurrentDetailsRequest
 */
export type ConnectionsApiGetCurrentDetailsRequest = {
    
    /**
    * (Required) The token returned when a user authenticated their account. This authorizes access to a specific account.
    * @type {string}
    * @memberof ConnectionsApiGetCurrentDetails
    */
    readonly connectionToken?: string
    
}

/**
 * Request parameters for listAll operation in ConnectionsApi.
 * @export
 * @interface ConnectionsApiListAllRequest
 */
export type ConnectionsApiListAllRequest = {
    
    /**
    * Pagination cursor to start requests from
    * @type {string}
    * @memberof ConnectionsApiListAll
    */
    readonly cursor?: string
    
    /**
    * The maximum number of results to return in a page.
    * @type {string}
    * @memberof ConnectionsApiListAll
    */
    readonly limit?: string
    
    /**
    * 
    * @type {string}
    * @memberof ConnectionsApiListAll
    */
    readonly externalId?: string
    
    /**
    * 
    * @type {string}
    * @memberof ConnectionsApiListAll
    */
    readonly dotNumber?: string
    
    /**
    * Filter connections by tag
    * @type {string}
    * @memberof ConnectionsApiListAll
    */
    readonly tag?: string
    
}

/**
 * Request parameters for updateCurrentConnectionDetails operation in ConnectionsApi.
 * @export
 * @interface ConnectionsApiUpdateCurrentConnectionDetailsRequest
 */
export type ConnectionsApiUpdateCurrentConnectionDetailsRequest = {
    
    /**
    * (Required) The token returned when a user authenticated their account. This authorizes access to a specific account.
    * @type {string}
    * @memberof ConnectionsApiUpdateCurrentConnectionDetails
    */
    readonly connectionToken?: string
    
} & ConnectionsUpdateCurrentConnectionDetailsRequest

/**
 * ConnectionsApiGenerated - object-oriented interface
 * @export
 * @class ConnectionsApiGenerated
 * @extends {BaseAPI}
 */
export class ConnectionsApiGenerated extends BaseAPI {
    /**
     * Create a new connection via API. This endpoint can be used to provide a completely custom connection creation experience for your customers.  For most use cases we recommend using the [Link UI](./rhuaxk9205cn8-link-component) to create connections.
     * @summary Create Connection
     * @param {ConnectionsApiCreateCustomConnectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectionsApiGenerated
     */
    public createCustomConnection(requestParameters: ConnectionsApiCreateCustomConnectionRequest = {}, options?: AxiosRequestConfig) {
        return ConnectionsApiFp(this.configuration).createCustomConnection(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the details of the current active connection. The current connection is derived from the provided connection token.
     * @summary Get Current Connection
     * @param {ConnectionsApiGetCurrentDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectionsApiGenerated
     */
    public getCurrentDetails(requestParameters: ConnectionsApiGetCurrentDetailsRequest = {}, options?: AxiosRequestConfig) {
        return ConnectionsApiFp(this.configuration).getCurrentDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all of the connections you have for your application. Connections represent the authenticated access you have to your customer\'s TSP data.
     * @summary List All Connections
     * @param {ConnectionsApiListAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectionsApiGenerated
     */
    public listAll(requestParameters: ConnectionsApiListAllRequest = {}, options?: AxiosRequestConfig) {
        return ConnectionsApiFp(this.configuration).listAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the details of the current active connection. The current connection is derived from the provided connection token.
     * @summary Update Current Connection
     * @param {ConnectionsApiUpdateCurrentConnectionDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectionsApiGenerated
     */
    public updateCurrentConnectionDetails(requestParameters: ConnectionsApiUpdateCurrentConnectionDetailsRequest = {}, options?: AxiosRequestConfig) {
        return ConnectionsApiFp(this.configuration).updateCurrentConnectionDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
